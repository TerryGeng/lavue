#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2017  DESY, Notkestr. 85, D-22607 Hamburg
#
# lavue is an image viewing program for photon science imaging detectors.
# Its usual application is as a live viewer using hidra as data source.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation in  version 2
# of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA  02110-1301, USA.
#
# Authors:
#     Jan Kotanski <jan.kotanski@desy.de>
#

""" Lavue Controller

tango server to change lavue setting in real time
"""

# PyTango imports
import PyTango
from PyTango import DebugIt
from PyTango.server import run
from PyTango.server import Device
from PyTango.server import DeviceMeta
from PyTango.server import attribute
from PyTango.server import device_property
# from PyTango.server import command
from PyTango import DispLevel
from PyTango import DevState
from PyTango import AttrWriteType
# from PyTango import PipeWriteType
# from PyTango import AttrQuality

# Additional import
import sys
import json

__all__ = ["LavueController", "main"]

if sys.version_info > (3,):
    unicode = str


class LavueController(Device):
    """
    tango server to change lavue setting in real time
    """
    __metaclass__ = DeviceMeta

    # -----------------
    # Device Properties
    # -----------------

    DynamicROIs = device_property(
        dtype='bool', default_value=True
    )

    DynamicROIsValues = device_property(
        dtype='bool', default_value=True
    )

    ROIAttributesNames = device_property(
        dtype=('str',),
    )

    # ----------
    # Attributes
    # ----------

    BeamCenterX = attribute(
        dtype='double',
        access=AttrWriteType.READ_WRITE,
        label="beam center x",
        unit="pixels",
        memorized=True,
        hw_memorized=True,
    )

    BeamCenterY = attribute(
        dtype='double',
        access=AttrWriteType.READ_WRITE,
        label="beam center y",
        unit="pixels",
        memorized=True,
        hw_memorized=True,
    )

    DetectorDistance = attribute(
        dtype='double',
        access=AttrWriteType.READ_WRITE,
        label="detector distance",
        unit="mm",
        memorized=True,
        hw_memorized=True,
    )

    DetectorROIs = attribute(
        dtype='str',
        access=AttrWriteType.READ_WRITE,
        display_level=DispLevel.EXPERT,
        label="detector ROIs",
        memorized=True,
        hw_memorized=True,
        doc="json dictionary with detector ROIs, e.g.  "
        "{`pilatusroi1`: [[26, 15, 232, 65]], "
        "`lambdarois`: [[54, 78, 102, 204], [10, 20, 40, 50]]}",
    )

    DetectorROIsValues = attribute(
        dtype='str',
        access=AttrWriteType.READ_WRITE,
        label="detector ROIs values",
        memorized=True,
        hw_memorized=True,
        doc="json dictionary with detector ROIs values, e.g.  "
        "{'pilatusroi1': [26.3], 'lambdarois': [54.3, 434.30]]}",
    )

    Energy = attribute(
        dtype='double',
        access=AttrWriteType.READ_WRITE,
        label="beam energy",
        unit="eV",
        memorized=True,
        hw_memorized=True,
    )

    # ---------------
    # General methods
    # ---------------

    def init_device(self):
        Device.init_device(self)
        self.get_device_properties(self.get_device_class())
        self.attr_BeamCenterX_read = 0.0
        self.attr_BeamCenterY_read = 0.0
        self.attr_DetectorDistance_read = 0.0
        self.attr_DetectorROIs_read = ""
        self.attr_DetectorROIsValues_read = ""
        self.attr_Energy_read = 0.0
        self.set_change_event("BeamCenterX", True, False)
        self.set_change_event("BeamCenterY", True, False)
        self.set_change_event("DetectorDistance", True, False)
        self.set_change_event("DetectorROIs", True, False)
        self.set_change_event("DetectorROIsValues", True, False)
        self.set_change_event("Energy", True, False)
        self.attr_DetectorROIs_read = "{}"
        self.attr_DetectorROIsValues_read = "{}"

        self.requested_scalar_aliases = []
        self.requested_spectrum_aliases = []
        self.requested_rois_aliases = []

        if not self.DynamicROIsValues and \
           hasattr(self, "current_scalar_aliases"):
            for alias in self.current_scalar_aliases:
                if alias not in self.requested_scalar_aliases:
                    aalias = ("%sSum" % alias) \
                             if alias != "__Null__" else "Sum"
                    if aalias not in self.ROIAttributesNames:
                        self.remove_attribute(str(aalias))
            self.current_scalar_aliases = []

        if not self.DynamicROIsValues and \
           hasattr(self, "current_spectrum_aliases"):
            for alias in self.current_spectrum_aliases:
                if alias not in self.requested_spectrum_aliases:
                    aalias = ("%sSums" % alias) \
                             if alias != "__Null__" else "Sums"
                    if aalias not in self.ROIAttributesNames:
                        self.remove_attribute(str(aalias))
            self.current_spectrum_aliases = []

        if not self.DynamicROIs and \
           hasattr(self, "current_rois_aliases"):
            for alias in self.current_rois_aliases:
                aalias = "%sROI" % alias \
                         if alias != "__Null__" else "ROI"
                if aalias not in self.ROIAttributesNames:
                    self.remove_attribute(str(aalias))
            self.current_rois_aliases = []

        self.current_scalar_aliases = []
        self.current_spectrum_aliases = []
        self.current_rois_aliases = []
        self.initialize_dynamic_attributes()

    def always_executed_hook(self):
        pass

    def delete_device(self):
        pass

    # ------------------
    # Attributes methods
    # ------------------

    def read_BeamCenterX(self):
        return self.attr_BeamCenterX_read

    def write_BeamCenterX(self, value):
        if self.attr_BeamCenterX_read != float(value):
            self.attr_BeamCenterX_read = float(value)
            self.push_change_event(
                "BeamCenterX", self.attr_BeamCenterX_read)

    def read_BeamCenterY(self):
        return self.attr_BeamCenterY_read

    def write_BeamCenterY(self, value):
        if self.attr_BeamCenterY_read != float(value):
            self.attr_BeamCenterY_read = float(value)
            self.push_change_event(
                "BeamCenterY", self.attr_BeamCenterY_read)

    def read_DetectorDistance(self):
        return self.attr_DetectorDistance_read

    def write_DetectorDistance(self, value):
        if self.attr_DetectorDistance_read != float(value):
            self.attr_DetectorDistance_read = float(value)
            self.push_change_event(
                "DetectorDistance", self.attr_DetectorDistance_read)

    def read_DetectorROIs(self):
        return self.attr_DetectorROIs_read

    def write_DetectorROIs(self, value):
        detrois = json.loads(value)
        for det, rois in detrois.items():
            if not isinstance(det, (str, unicode)):
                raise Exception(
                    "ROI name %s is not string" % str(det))
            if not isinstance(rois, (list)):
                raise Exception(
                    "ROI %s is not a double list" % str(det))
            for roi in rois:
                if not isinstance(roi, (list)):
                    raise Exception(
                        "ROI %s is not a double list" % str(det))
                if len(roi) != 4:
                    raise Exception(
                        "ROI %s len is not 4" % str(det))
                for cr in roi:
                    float(cr)
        if self.DynamicROIs:
            self.requested_rois_aliases = []
            for det, rois in detrois.items():
                self.requested_rois_aliases.append(det.title())

        if self.attr_DetectorROIs_read != str(value):
            self.attr_DetectorROIs_read = str(value)
            if self.DynamicROIs:
                self.initialize_dynamic_attributes()
            self.push_change_event("DetectorROIs", self.attr_DetectorROIs_read)

    def read_DetectorROIsValues(self):
        return self.attr_DetectorROIsValues_read

    def write_DetectorROIsValues(self, value):
        detrois = json.loads(value)
        for det, rois in detrois.items():

            if not isinstance(det, (str, unicode)):
                raise Exception(
                    "ROI name %s is not string" % str(det))
            if not isinstance(rois, (list)):
                raise Exception(
                    "ROI %s is not a double list" % str(det))
            for vroi in rois:
                if vroi is not None:
                    float(vroi)

        if self.DynamicROIsValues:
            self.requested_scalar_aliases = []
            self.requested_spectrum_aliases = []
            for det, rois in detrois.items():
                if len(rois) == 1:
                    self.requested_scalar_aliases.append(det.title())
                elif len(rois) > 1:
                    self.requested_spectrum_aliases.append(det.title())

        if self.attr_DetectorROIsValues_read != str(value):
            self.attr_DetectorROIsValues_read = str(value)
            if self.DynamicROIsValues:
                self.initialize_dynamic_attributes()
            self.push_change_event(
                "DetectorROIsValues", self.attr_DetectorROIsValues_read)

    def read_Energy(self):
        return self.attr_Energy_read

    def write_Energy(self, value):
        if self.attr_Energy_read != float(value):
            self.attr_Energy_read = float(value)
            self.push_change_event("Energy", self.attr_Energy_read)

    def initialize_dynamic_rois_sums_attributes(self):
        """ initialize rois dynamic attributes
        """
        if self.current_scalar_aliases != self.requested_scalar_aliases or \
           self.current_spectrum_aliases != \
                self.requested_spectrum_aliases or \
                (self.ROIAttributesNames or []):
            for alias in self.current_scalar_aliases:
                if alias not in self.requested_scalar_aliases:
                    aalias = ("%sSum" % alias) \
                             if alias != "__Null__" else "Sum"
                    if aalias not in (self.ROIAttributesNames or []):
                        self.remove_attribute(str(aalias))
            for alias in self.current_spectrum_aliases:
                if alias not in self.requested_spectrum_aliases:
                    aalias = ("%sSums" % alias) \
                             if alias != "__Null__" else "Sums"
                    if aalias not in (self.ROIAttributesNames or []):
                        self.remove_attribute(str(aalias))

            for alias in self.requested_scalar_aliases:
                if alias not in self.current_scalar_aliases:
                    myAttr = PyTango.Attr(
                        str("%sSum" % alias) if alias != "__Null__" else "Sum",
                        PyTango.DevDouble, PyTango.READ)
                    self.add_attribute(
                        myAttr, LavueController.read_ScalarDynamicAttr,
                        None, None)
            for alias in self.requested_spectrum_aliases:
                if alias not in self.current_spectrum_aliases:
                    myAttr = PyTango.SpectrumAttr(
                        str("%sSums" % alias)
                        if alias != "__Null__" else "Sums",
                        PyTango.DevDouble,
                        PyTango.AttrWriteType.READ, 4096)
                    self.add_attribute(
                        myAttr, LavueController.read_SpectrumDynamicAttr,
                        None, None)

            for alias in (self.ROIAttributesNames or []):
                if alias.endswith("Sum"):
                    salias = alias[:-3]
                    if not salias:
                        salias = "__Null__"
                    if salias not in self.current_scalar_aliases:
                        myAttr = PyTango.Attr(
                            str(alias),
                            PyTango.DevDouble, PyTango.READ)
                        self.add_attribute(
                            myAttr, LavueController.read_ScalarDynamicAttr,
                            None, None)
                if alias.endswith("Sums"):
                    salias = alias[:-3]
                    if not salias:
                        salias = "__Null__"
                    if salias not in self.current_spectrum_aliases:
                        myAttr = PyTango.SpectrumAttr(
                            str(alias), PyTango.DevDouble,
                            PyTango.AttrWriteType.READ, 4096)
                        self.add_attribute(
                            myAttr,
                            LavueController.read_SpectrumDynamicAttr,
                            None, None)
            self.current_scalar_aliases = self.requested_scalar_aliases
            self.current_spectrum_aliases = self.requested_spectrum_aliases

    def initialize_dynamic_rois_attributes(self):
        """ initialize rois dynamic attributes
        """
        if self.current_rois_aliases != \
           self.requested_rois_aliases or (self.ROIAttributesNames or []):
            for alias in self.current_rois_aliases:
                if alias not in self.requested_rois_aliases:
                    aalias = "%sROI" % alias \
                             if alias != "__Null__" else "ROI"
                    if aalias not in (self.ROIAttributesNames or []):
                        self.remove_attribute(str(aalias))

            for alias in self.requested_rois_aliases:
                if alias not in self.current_rois_aliases:
                    myAttr = PyTango.SpectrumAttr(
                        str("%sROI" % alias)
                        if alias != "__Null__" else "ROI",
                        PyTango.DevLong,
                        PyTango.AttrWriteType.READ, 4096)
                    self.add_attribute(
                        myAttr, LavueController.read_ROIsDynamicAttr,
                        None, None)
            for alias in (self.ROIAttributesNames or []):
                if alias.endswith("ROI"):
                    salias = alias[:-3]
                    if not salias:
                        salias = "__Null__"
                    if salias not in self.current_rois_aliases:
                        myAttr = PyTango.SpectrumAttr(
                            str(alias), PyTango.DevLong,
                            PyTango.AttrWriteType.READ, 4096)
                        self.add_attribute(
                            myAttr, LavueController.read_ROIsDynamicAttr,
                            None, None)
            self.current_rois_aliases = self.requested_rois_aliases

    def initialize_dynamic_attributes(self):
        self.debug_stream("In initialize_dynamic_attributes()")
        if self.DynamicROIsValues:
            self.initialize_dynamic_rois_sums_attributes()
        if self.DynamicROIs:
            self.initialize_dynamic_rois_attributes()

    def read_ScalarDynamicAttr(self, attr):
        self.debug_stream("In read_ScalarDynamicAttr()")
        name = attr.get_name()[:-3]
        if not name:
            name = "__null__"
        detrois = json.loads(self.attr_DetectorROIsValues_read)
        if name in detrois.keys() and detrois[name]:
            attr.set_value(detrois[name][0])
        else:
            name = ("%s%s" % (name[0].lower(), name[1:]))
            if name in detrois.keys() and detrois[name]:
                attr.set_value(detrois[name][0])
            else:
                attr.set_value(-1)

    def read_SpectrumDynamicAttr(self, attr):
        self.debug_stream("In read_SpectrumDynamicAttr()")

        name = attr.get_name()[:-4]
        if not name:
            name = "__null__"
        detrois = json.loads(self.attr_DetectorROIsValues_read)
        if name in detrois.keys():
            attr.set_value(detrois[name])
        else:
            name = ("%s%s" % (name[0].lower(), name[1:]))
            if name in detrois.keys():
                attr.set_value(detrois[name])
            else:
                attr.set_value([])

    def read_ROIsDynamicAttr(self, attr):
        self.debug_stream("In read_ROIsDynamicAttr()")

        name = attr.get_name()[:-3]
        if not name:
            name = "__null__"
        detrois = json.loads(self.attr_DetectorROIs_read)
        if name in detrois.keys():
            dtrois = [it for roi in detrois[name] for it in roi]
        else:
            name = ("%s%s" % (name[0].lower(), name[1:]))
            if name in detrois.keys():
                dtrois = [it for roi in detrois[name] for it in roi]
            else:
                dtrois = []
        attr.set_value(dtrois)

    # --------
    # Commands
    # --------

    @DebugIt()
    def dev_state(self):
        return DevState.ON

    @DebugIt()
    def dev_status(self):
        self._status = "State is ON"
        return self._status

# ----------
# Run server
# ----------


def main(args=None, **kwargs):
    return run((LavueController,), args=args, **kwargs)


if __name__ == '__main__':
    main()
